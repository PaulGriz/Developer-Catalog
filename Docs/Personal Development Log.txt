--------------------------------------------------------------------------------
|                       Personal Development Log                               |
--------------------------------------------------------------------------------

---------------------------
| Heroku Publishing Tips:
---------------------------

| Two databases can be defined in the application. One for Heroku's End and the
     other for local Testing / Development

|---> Example:
|---> app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL',
                                                            'sqlite://data.db')

|---> Where:
     Parameter 1 is Heroku's Database connection
     Parameter 2 is the local database connection


--------------------------------------------------------------------------------

-----------------------
| Python Syntax Tips:
-----------------------

|---> "The Keyword Argument Unpacking Syntax"
          (NOTE: Use this with a parser. This requires each parameter to
               be a correct order every time they're passed to a function.)

|---> Example:
     def function_name(parameter 1, parameter 2, parameter 3):
          list = [parameter 1, parameter 2, parameter 3]
          function_name(**list)


--------------------------------------------------------------------------------

--------------------
| SQLAlchemy Tips:
--------------------

|---> Easy Example for Finding Data:

|---> Example:
     @classmethod
     def function_name(cls, some_parameters):
          return cls.query.filter_by(parameters=parameters).first()

|---> Easy Example for Saving Data:
          (NOTE: [To Delete] Just replace .add with .delete)

|---> Example:
     @classmethod
     def function_name(self):
          db.session.add(self)
          db.session.commit()

| - I can filter multiple parameters by -> filter_by(x=x, y=y, z=z)

| - SQLAlchemy can also connect to database structures other than SQLite


--------------------------------------------------------------------------------

-----------------------
| Models vs Resources
-----------------------

| Models -->  Are the internal representations of the data. Only for Server to
          Data Communication.

| Resources --> Are the external representations of the data. All interactions
          between User and Server.

          User --> Resources --> Server --> Models --> Data
                              OR
          Data --> Models --> Server --> Resources --> User

--------------------------------------------------------------------------------







--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-----------------
# TODO
-----------------

     1.) Need to add category items class after:
          A.) Category and CategoryList is finished in resources/category.py
          B.) Class CategoryModel is finished in models/category.py

     2.) Set every category with matching category items
          A.) Category items will be text descriptions at first

     3.) Add Google and Github OAth into the site and possibly remove
          the current authentication for security

     4.) Build a working website for users to interact with: CRUD

     5.) Allow deeper features in the category items
          A.) Pictures
          B.) Videos
          C.) Codepen Plugin
          D.) Other useful features for users

     6.) Add JavaScript to the website for an added fluid feel

--------------------------------------------------------------------------------
